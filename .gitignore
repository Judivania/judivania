// Definição dos pinos para LEDs e botões
const int ledPins[] = {6, 7, 8, 9};       // Pinos dos LEDs: Vermelho, Amarelo, Verde, Azul
const int buttonPins[] = {2, 3, 4, 5};    // Pinos dos botões correspondentes
const int buttonStart = 11;
const int buzzerPin = 10;                 // Pino do buzzer para feedback sonoro

// Pinos do display de 7 segmentos
const int segmentPins[] = {12, 13, A3, A1, A2, A5, A4}; // Pinos para cada segmento (a, b, c, d, e, f, g)

// Mapeamento dos números para os segmentos do display
const byte segmentMap[10] = {
  0b0111111, // 0
  0b0000110, // 1
  0b1011011, // 2
  0b1001111, // 3
  0b1100110, // 4
  0b1101101, // 5
  0b1111101, // 6
  0b0000111, // 7
  0b1111111, // 8
  0b1101111  // 9
};

// Variáveis do jogo
int gameSequence[50];          // Sequência gerada pelo sistema (até 50 elementos)
int userSequence[50];          // Sequência que o jogador tenta reproduzir
int currentLength = 1;         // Comprimento inicial da sequência (começa com 1)
bool gameActive = false;       // Controle do estado do jogo (se está em andamento ou não)

// Função para gerar uma nova sequência aleatória
void createSequence() {
  for (int i = 0; i < currentLength; i++) {
    gameSequence[i] = random(0, currentLength); // Gera números aleatórios entre 0 e 3 (correspondente aos LEDs)
  }
}

// Função para acender os LEDs na sequência
void displaySequence() {
  for (int i = 0; i < currentLength; i++) {
    int ledIndex = gameSequence[i]; // Pega o índice do LED correspondente
      
    tone(buzzerPin, 300); // Emitir som no buzzer enquanto o LED acende
    digitalWrite(ledPins[ledIndex], HIGH); // Acende o LED
    delay(500); // LED aceso por 500 ms
      
    noTone(buzzerPin); // Para o som no buzzer
    digitalWrite(ledPins[ledIndex], LOW); // Apaga o LED
    delay(250); // Pequeno intervalo antes do próximo LED
  }
}

// Função para verificar a sequência do jogador
bool validateUserInput() {
  for (int i = 0; i < currentLength; i++) {
    if (userSequence[i] != gameSequence[i]) { // Compara a sequência do jogador com a gerada
      return false; // Retorna falso se houver erro
    }
  }
  return true; // Retorna verdadeiro se a sequência estiver correta
}

// Função para atualizar o display de 7 segmentos
void refreshDisplay(int number) {
  if (number > 10) number = 9; // Limita o número a 9 (máximo do display)
  byte segments = segmentMap[number]; // Mapeia o número para os segmentos

  for (int i = 0; i < 9; i++) {
    digitalWrite(segmentPins[i], (segments >> i) & 0x01); // Acende os segmentos correspondentes
  }
}

// Função para tocar a música de início
void playIntroMusic() {
  int melody[] = { 440, 494, 523, 494, 440 }; // Notas (A4, B4, C5 , B4, A4)
  int noteDurations[] = { 4, 4, 4, 4, 4 }; // Durações (quarte)
    
  for (int noteIndex = 0; noteIndex < 5; noteIndex++) {
    int duration = 1000 / noteDurations[noteIndex]; // Duração da nota em milissegundos
    tone(buzzerPin, melody[noteIndex], duration); // Toca a nota
    delay(duration); // Espera a duração da nota
    noTone(buzzerPin ); // Para o som
    delay(50); // Pequeno intervalo entre as notas
  }
}

// Função para tocar a música de game over
void playEndMusic() {
  int melody[] = { 262, 294, 330, 349, 392, 440, 494, 523 }; // Notas (C4, D4, E4, F4, G4, A4, B4, C5)
  int noteDurations[] = { 4, 4, 4, 4, 4, 4, 4, 4 }; // Durações (quarte)
    
  for (int noteIndex = 0; noteIndex < 8; noteIndex++) {
    int duration = 1000 / noteDurations[noteIndex]; // Duração da nota em milissegundos
    tone(buzzerPin, melody[noteIndex], duration); // Toca a nota
    delay(duration); // Espera a duração da nota
    noTone(buzzerPin); // Para o som
    delay(50); // Pequeno intervalo entre as notas
  }
}

// Função para reiniciar o jogo
void restartGame() {
  currentLength = 1; // Reinicia a sequência para o tamanho inicial
  gameActive = false;  // Para o jogo
  refreshDisplay(currentLength); // Atualiza o display para mostrar o nível inicial
}

// Função de configuração inicial
void setup() {
  Serial.begin(9600);
  
  // Configurar LEDs e botões
  for (int i = 0; i < 4; i++) {
    pinMode(ledPins[i], OUTPUT); // Define os pinos dos LEDs como saída
    pinMode(buttonPins[i], INPUT); // Define os pinos dos botões como entrada
  }

  // Configurar pinos do display
  for (int i = 0; i < 7; i++) {
    pinMode(segmentPins[i], OUTPUT); // Define os pinos do display como saída
    digitalWrite(segmentPins[i], LOW); // Inicializa todos os segmentos apagados
  }
  
  pinMode(buttonStart, INPUT); // Botao para iniciar...
  
  pinMode(buzzerPin, OUTPUT); // Configura o pino do buzzer como saída

  // Iniciar semente para random()
  randomSeed(analogRead(0)); // Inicializa a semente do gerador de números aleatórios
  
  playIntroMusic(); // Toca a música de início

  // Mostrar nível inicial no display
  //refreshDisplay(currentLength); // Atualiza o display para mostrar o nível inicial
}

// Loop principal
void loop() {
  if (!gameActive) {
    // Iniciar um novo jogo ao pressionar o botão do primeiro LED
    if (digitalRead(buttonStart) == LOW) { // Verifica se o botão do primeiro LED foi pressionado
      Serial.println("Iniciou game!!");
      gameActive = true; // Inicia o jogo
      refreshDisplay(currentLength); // Atualiza o display para mostrar o nível atual
      delay(500); // Aguarda meio segundo
      createSequence(); // Gera uma nova sequência aleatória
    }
  } else {
    displaySequence(); // Reproduz a sequência gerada

    // Jogador insere sequência
    int userIndex = 0; // Índice para a sequência do jogador
    while (userIndex < currentLength) { // Enquanto o jogador não completar a sequência
      for (int i = 0; i < currentLength; i++) { // Verifica cada botão
        if (digitalRead(buttonPins[i]) == HIGH) { // Se o botão correspondente for pressionado
          userSequence[userIndex++] = i; // Armazena a entrada do jogador
		  
          // Feedback visual
          tone(buzzerPin, 600); // Emitir som no buzzer
          digitalWrite(ledPins[i], HIGH); // Acende o LED correspondente
          delay(300); // Mantém o LED aceso por 300 ms
          
          noTone(buzzerPin); // Para o som no buzzer
          digitalWrite(ledPins[i], LOW); // Apaga o LED

          while (digitalRead(buttonPins[i]) == HIGH); // Aguarda soltar o botão
        }
      }
    }

    // Verificar sequência do jogador
    if (validateUserInput()) { // Se a sequência do jogador estiver correta
      currentLength++; // Aumenta o comprimento da sequência
      
      if (currentLength > 9) { // Se o comprimento da sequência exceder 9
        randomSeed(analogRead(0)); // Reinicia a semente para novos números aleatórios
        playIntroMusic(); // Toca a música de início
        restartGame(); // Reinicia o jogo
      }
      
      refreshDisplay(currentLength); // Atualiza o display com o novo nível
      delay(500); // Aguarda meio segundo antes de gerar uma nova sequência
      createSequence(); // Gera uma nova sequência aleatória
    } else {
      // Sequência errada - Reinicia o jogo
      restartGame(); // Reinicia o jogo
      
      byte segments = 0b01111111; // Mostra um 0
      for (int i = 0; i < 7; i++) {
        digitalWrite(segmentPins[i], (segments >> i) & 0x01);
      }
      
      playEndMusic(); // Toca a música de game over
      delay(500);
    }
  }
}
